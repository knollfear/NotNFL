{"version":3,"sources":["logo.svg","api/Score.js","components/Footer.js","components/Rules.js","api/Cards.js","components/GameArea.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getHighScore","localStorage","getItem","updateHighScore","prevScore","score","Math","max","setItem","Footer","rule","activeCard","isNot","highScore","className","valueRuleObj","val","text","cardRender","key","Object","keys","value","obj","team","valueTextField","valueRuleField","imgCard","imgPrompt","src","alt","txtPrompter","extraText","prefix","suffix","card","txtCard","Rules","strTeamBadge","strTeam","strTeamShort","strManager","strStadiumLocation","strStadium","getCards","source","a","fetch","process","response","json","teams","GameArea","cards","clickHandler","map","classes","isCorrect","idTeam","onClick","shuffle","array","t","i","m","length","floor","random","GameContainer","props","state","currentRule","changeRule","gradedCards","activeCards","slice","console","log","setState","newGame","numRules","min","possibleCards","forEach","numGames","isNaN","parseInt","updateNumGames","endGame","bind","selectedSource","this","then","setupGame","Fragment","startNewGame","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,uJCErCC,EAAe,WACjB,OAAOC,aAAaC,QAHN,iBAG4B,GAQxCC,EAAkB,SAAAC,GALH,IAAAC,IAObC,KAAKC,IACDH,EACAJ,KAPRC,aAAaO,QARC,eAQkBH,ICmBrBI,EAxBA,SAAC,GAA+C,EAA9CC,KAA8C,EAAxCC,WAAwC,EAA5BC,MAA6B,IAAtBP,EAAqB,EAArBA,MAAOD,EAAc,EAAdA,UAEvCS,EAAYb,IAClB,OACI,yBAAKc,UAAW,UACZ,+CACoBT,GAEnBD,GACG,gDACqBA,GAGxBS,EAAY,GACT,4CACiBA,KCZ3BE,EAAe,SAACC,EAAKC,EAAMP,EAAMQ,GACnC,IAAMC,EAAMC,OAAOC,KAAKL,GAAK,GACvBM,EAAQN,EAAIG,GAClB,MAAO,CACHF,KAAK,SAACM,EAAKX,GAAW,OAAOK,EAAOA,EAAKM,EAAKX,EAAOO,GANtC,SAACK,EAAMZ,EAAOI,GAAS,MAAM,GAAN,OAAUJ,EAAQ,OAAS,IAA3B,OAAgCY,EAAKR,IAMfS,CAAeF,EAAKX,EAAOO,IACvFT,KAAM,SAACa,EAAKZ,GACR,OAAOD,EAAOA,EAAKa,EAAKZ,EAAYQ,GAPzB,SAACI,EAAKZ,EAAYK,GAAS,OAAOO,EAAIP,KAASL,EAAWK,GAO1BU,CAAeH,EAAKZ,EAAYQ,IAE/ED,WAAY,SAACK,GAAQ,OAAOL,EAAaA,EAAWK,EAAKD,GAASK,EAAQJ,EAAKD,IAC/EN,QAKFY,EAAY,SAACL,EAAKX,EAAOI,GAC3B,OACI,6BACKJ,EAAQ,MAAQ,GACjB,yBAAKiB,IAAKN,EAAIP,GAAOc,IAAKP,EAAIP,OA8BpCe,EAAc,SAACR,EAAKX,EAAOI,EAAKgB,GAClC,MAAM,GAAN,OAAWA,EAAUC,QAAU,GAA/B,YAAqCrB,EAAQ,OAAS,GAAtD,YAA4DW,EAAIP,GAAhE,YAAwEgB,EAAUE,QAAU,KAG1FP,EAAU,SAACQ,EAAMnB,GACnB,OACI,yBAAKa,IAAKM,EAAKnB,GAAOc,IAAKK,EAAKnB,MAIlCoB,EAAU,SAACD,EAAMnB,GACnB,OAAO,gCAASmB,EAAKnB,KAaTqB,EAVH,CACTtB,EAAa,CAACuB,aAAc,WAAaV,EAAW,KAAMQ,GAC1DrB,EAAa,CAACwB,QAAS,iBACvBxB,EAAa,CAACuB,aAAc,WAAaV,EAAW,KAAMQ,GAC1DrB,EAAa,CAACyB,aAAc,iBAC5BzB,EAAa,CAAC0B,WAAY,iBA3BhB,SAAClB,EAAKX,EAAOI,GACvB,OACI,6BACKe,EAAYR,EAAKX,EAAOI,EAAK,CAACiB,OAAQ,oBAyB/ClB,EAAa,CAAC2B,mBAAoB,iBArCd,SAACnB,EAAKX,EAAOI,GACjC,OACI,6BACKe,EAAYR,EAAKX,EAAOI,EAAK,CAACiB,OAAQ,6BAmC/ClB,EAAa,CAAC4B,WAAY,iBA9CN,SAACpB,EAAKX,EAAOI,GACjC,OACI,6BACKe,EAAYR,EAAKX,EAAOI,EAAK,CAACiB,OAAQ,8B,uBChC7CW,EAAQ,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEAEUC,MAAMC,oBAFhB,cAEPC,EAFO,gBAGMA,EAASC,OAHf,cAGPA,EAHO,yBAINA,EAAKC,OAJC,2CAAH,sDC4BCC,EA1BE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,aAAc5C,EAAS,EAATA,KACpC,OACI,6BACK2C,EAAME,KAAI,SAACpB,GACZ,IAAIqB,EAAU,OAMd,OALIrB,EAAKsB,YACLD,GAAW,YAKX,yBACIrC,IAAG,UAAKgB,EAAKuB,OAAV,YAAoBhD,EAAKM,KAC5BF,UAAY0C,EACZG,QAAS,WAAOL,EAAanB,KAG5BzB,EAAKQ,WAAWiB,SCuIrC,SAASyB,EAAQC,GAIb,IAHA,IACIC,EACAC,EAFAC,EAAIH,EAAMI,OAGPD,GACHD,EAAIzD,KAAK4D,MAAM5D,KAAK6D,SAAWH,KAC/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAIJM,M,kDA3JX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgDVf,aAAe,SAAC/B,GAEZ,IAAIkC,EAAY,EAAKa,MAAMC,YAAY7D,KACnCa,EACA,EAAK+C,MAAM3D,YAGX,EAAK2D,MAAM1D,QACX6C,GAAaA,GAEjB,IAAIpD,EAAQ,EACZ,GAAIoD,EACApD,EAAQ,EAAKiE,MAAMjE,MAAQ,EAC3B,EAAKmE,WAAWnE,OAEb,CACH,IAAMoE,EAAc,EAAKH,MAAMI,YAAYC,QAAQpB,KAAI,SAACpB,GAUpD,OATAA,EAAKsB,UAAY,EAAKa,MAAMC,YAAY7D,KACpCyB,EACA,EAAKmC,MAAM3D,YAEfiE,QAAQC,IAAI1C,EAAKsB,WACb,EAAKa,MAAM1D,QACXuB,EAAKsB,WAAatB,EAAKsB,WAE3BmB,QAAQC,IAAI1C,EAAKsB,WACVtB,KAEX,EAAK2C,SAAS,CAACJ,YAAaD,IAC5B,EAAKM,YA9EM,EAqFnBP,WAAa,SAACnE,GAEV,IAAM2E,EAAW1E,KAAK2E,IAAI5C,EAAM4B,OAAQ3D,KAAK4D,MAAM,EAAK7D,EAAQ,IAChEuE,QAAQC,IAAIG,GACZ,IAAIT,EAAclC,EAAM/B,KAAK4D,MAAM5D,KAAK6D,SAAWa,IAE/CE,EAAgB,EAAKZ,MAAMjB,MAC/BO,EAAQsB,GACR,IAAIvE,EAAauE,EAAc,GAC3BR,EAAcQ,EAAcP,MAAM,EAAGrE,KAAK4D,MAAM7D,EAAQ,GAAK,GACjEuD,EAAQc,GACRA,EAAYS,SAAQ,SAAAhD,GAASA,EAAKsB,WAAY,KAC9C,IAAI7C,EAASN,KAAK4D,MAAsB,GAAhB5D,KAAK6D,UAAiB,IAAM,EAEpD,EAAKW,SAAS,CAAEzE,QAAOkE,cAAaW,gBAAevE,aAAY+D,cAAa9D,WAnG7D,EAwGnBmE,QAAU,WACN,IAAM3E,EAAY,EAAKkE,MAAMjE,MAC7BF,EAAgBC,GLjGD,WACnB,IAAIgF,EAAWnF,aAAaC,QAAQ,mBAAqB,IACzDkF,EAAWC,MAAMD,GAAY,EAAIE,SAASF,EAAU,IAAM,EAE1DnF,aAAaO,QAAQ,iBAAkB4E,GK8FnCG,GACA,EAAKT,SAAS,CAAC1E,YAAWoF,SAAQ,KA1GlC,EAAKlC,aAAe,EAAKA,aAAamC,KAAlB,gBACpB,EAAKnB,MAAS,CACVoB,eAAe,WACfnB,YAAYlC,EAAM,GAClBzB,OAAM,EACNP,MAAM,GAPK,E,wDAYN,IAAD,OACSuC,EAAS+C,KAAKrB,MAAMzB,QAE5B+C,MAAK,SAACV,GACXtB,EAAQsB,GACRN,QAAQC,IAAIK,EAAcjB,QAC1B,EAAKa,SAAS,CACVzB,MAAO6B,EACPvE,WAAWuE,EAAc,GACzBR,YAAYQ,EAAcP,MAAM,EAAG,U,qCAO3C,IAAIL,EAAQ,CACRkB,SAAS,EACTjB,YAAYlC,EAAM,GAClBzB,OAAM,EACNP,MAAM,GAGN6E,EAAgBS,KAAKrB,MAAMjB,MAC/BO,EAAQsB,GACRZ,EAAMnC,KAAO+C,EACbZ,EAAM3D,WAAauE,EAAc,GACjCZ,EAAMI,YAAcQ,EAAcP,MAAM,EAAG,GAC3CL,EAAMI,YAAYS,SAAQ,SAAAhD,GAASA,EAAKsB,WAAY,KACpDkC,KAAKb,SAASR,K,0CAKdqB,KAAKE,c,+BAiEC,IAAD,OAEL,OACIF,KAAKrB,MAAMjB,MACP,kBAAC,IAAMyC,SAAP,KACI,yBAAKhF,UAAW,UAAhB,uBACC6E,KAAKrB,MAAMkB,SAER,6BACI,wDAA8BG,KAAKrB,MAAMlE,WACzC,4BAAQuD,QAAS,WAAK,EAAKoC,iBAA3B,cAGR,yBAAKjF,UAAW,YACZ,yBAAKA,UAAS,eAAU6E,KAAKrB,MAAM1D,OAAS,QACvC+E,KAAKrB,MAAMC,YAAYtD,KAAK0E,KAAKrB,MAAM3D,WAAYgF,KAAKrB,MAAM1D,QAEnE,kBAAC,EAAD,CAAUyC,MAAOsC,KAAKrB,MAAMI,YAAapB,aAAcqC,KAAKrC,aAAc5C,KAAMiF,KAAKrB,MAAMC,eAE/F,kBAAC,EAAD,CACIlE,MAAOsF,KAAKrB,MAAMjE,MAClBD,UAAWuF,KAAKrB,MAAMlE,aAK9B,4C,GA1IY4F,IAAMC,WCCnBC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.d61c268a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b1b5ea4.svg\";","const HIGHSCORE = 'FN_HIGHSCORE';\n\nconst getHighScore = () =>{\n    return localStorage.getItem(HIGHSCORE) || 0\n};\n\nconst setHighScore = score =>{\n\n    localStorage.setItem(HIGHSCORE, score)\n};\n\nconst updateHighScore = prevScore =>{\n    setHighScore(\n        Math.max(\n            prevScore,\n            getHighScore()\n        )\n    )\n};\n\nconst updateNumGames = () =>{\n    let numGames = localStorage.getItem('NNFL_NUM_GAMES') || '0';\n    numGames = isNaN(numGames) ? 1 : parseInt(numGames, 10) + 1;\n\n    localStorage.setItem('NNFL_NUM_GAMES', numGames)\n};\n\nexport {\n    getHighScore,\n    setHighScore,\n    updateHighScore,\n    updateNumGames,\n\n}\n","import React from 'react';\nimport {getHighScore} from \"../api/Score\";\n\nconst Footer = ({rule, activeCard, isNot, score, prevScore}) =>{\n\n    const highScore = getHighScore();\n    return(\n        <div className={'footer'}>\n            <div>\n                Current Score: {score}\n            </div>\n            {prevScore &&\n                <div>\n                    Previous Score: {prevScore}\n                </div>\n            }\n            {highScore > 0 &&\n                <div>\n                    High Score: {highScore}\n                </div>\n            }\n\n\n        </div>\n    )\n}\n\nexport default Footer\n","import React from \"react\";\n\n\n\nconst valueTextField = (team, isNot, val) =>{ return `${isNot ? 'Not ' : ''}${team[val]}` };\nconst valueRuleField = (obj, activeCard, val) =>{ return obj[val] === activeCard[val]};\nconst valueRuleObj = (val, text, rule, cardRender) =>{\n    const key = Object.keys(val)[0];\n    const value = val[key];\n    return {\n        text:(obj, isNot) =>{ return text ? text(obj, isNot, key) : valueTextField(obj, isNot, key) },\n        rule: (obj, activeCard)=>{\n            return rule ? rule(obj, activeCard, key) : valueRuleField(obj, activeCard, key)\n        },\n        cardRender: (obj) =>{return cardRender ? cardRender(obj, value) : imgCard(obj, value)},\n        val,\n\n    }\n};\n\nconst imgPrompt = (obj, isNot, val) =>{\n    return (\n        <div>\n            {isNot ? 'not' : ''}\n            <img src={obj[val] } alt={obj[val]}/>\n        </div>\n    )\n};\n\nconst stadiumCapacity = (obj, isNot, val) =>{\n    return (\n        <div>\n            {txtPrompter(obj, isNot, val, {prefix: 'Stadium Capacity is '})}\n        </div>\n    )\n};\n\nconst stadiumLocation = (obj, isNot, val) =>{\n    return (\n        <div>\n            {txtPrompter(obj, isNot, val, {prefix: 'Stadium Location is '})}\n        </div>\n    )\n};\n\n\nconst coach = (obj, isNot, val) =>{\n    return (\n        <div>\n            {txtPrompter(obj, isNot, val, {prefix: 'Coached by '})}\n        </div>\n    )\n};\n\nconst txtPrompter = (obj, isNot, val, extraText) =>{\n    return  `${extraText.prefix || ''} ${isNot ? 'not ' : ''} ${obj[val]} ${extraText.suffix || ''}`\n};\n\nconst imgCard = (card, val) =>{\n    return (\n        <img src={card[val] } alt={card[val]}/>\n    )\n};\n\nconst txtCard = (card, val) =>{\n    return <button>{card[val]}</button>\n};\n\nconst Rules =[\n    valueRuleObj({strTeamBadge: 'strTeam' }, imgPrompt, null, txtCard),\n    valueRuleObj({strTeam: 'strTeamBadge'}),\n    valueRuleObj({strTeamBadge: 'strTeam' }, imgPrompt, null, txtCard),\n    valueRuleObj({strTeamShort: 'strTeamBadge'}),\n    valueRuleObj({strManager: 'strTeamBadge' }, coach),\n    valueRuleObj({strStadiumLocation: 'strTeamBadge'}, stadiumLocation),\n    valueRuleObj({strStadium: 'strTeamBadge'}, stadiumCapacity),\n];\n\nexport default  Rules;\n","const getCards = async source =>{\n\n    const response = await fetch(process.env.PUBLIC_URL + `/NFL.json`);\n    const json = await response.json();\n    return json.teams;\n\n};\n\nexport {\n    getCards,\n}\n","import React, { useState } from 'react';\n\nconst GameArea = ({cards, clickHandler, rule}) =>{\n    return (\n        <div>\n            {cards.map((card)=>{\n            let classes = 'card';\n            if (card.isCorrect){\n                classes += ' correct'\n\n            }\n\n            return (\n                <div\n                    key={`${card.idTeam}-${rule.val}`}\n                    className={ classes }\n                    onClick={() => {clickHandler(card)}}\n                >\n\n                    {rule.cardRender(card)}\n\n                </div>\n        )\n        })}\n        </div>\n    )\n};\n\nexport default GameArea\n","\nimport React from 'react';\nimport Footer from \"./Footer\";\nimport Rules from \"./Rules\"\nimport {getCards} from \"../api/Cards\";\nimport GameArea from \"./GameArea\";\nimport {updateHighScore, updateNumGames } from \"../api/Score\";\n\n\n\nclass GameContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.clickHandler = this.clickHandler.bind(this);\n        this.state  = {\n            selectedSource:'fearless',\n            currentRule:Rules[0],\n            isNot:false,\n            score:0,\n\n        }\n    }\n\n    setupGame() {\n        const apiCards = getCards(this.state.source);\n\n        apiCards.then((possibleCards) =>{\n            shuffle(possibleCards);\n            console.log(possibleCards.length);\n            this.setState({\n                cards: possibleCards,\n                activeCard:possibleCards[0],\n                activeCards:possibleCards.slice(0, 4)\n            });\n        });\n\n    }\n\n    startNewGame() {\n        let state = {\n            endGame: false,\n            currentRule:Rules[0],\n            isNot:false,\n            score:0,\n        };\n\n        let possibleCards = this.state.cards;\n        shuffle(possibleCards);\n        state.card = possibleCards;\n        state.activeCard = possibleCards[0];\n        state.activeCards = possibleCards.slice(0, 4);\n        state.activeCards.forEach(card =>{ card.isCorrect = false});\n        this.setState(state)\n\n    }\n\n    componentDidMount() {\n        this.setupGame();\n    }\n\n    clickHandler = (obj) =>{\n\n        let isCorrect = this.state.currentRule.rule(\n            obj,\n            this.state.activeCard\n        );\n\n        if (this.state.isNot){\n            isCorrect = !isCorrect\n        }\n        let score = 0;\n        if (isCorrect){\n            score = this.state.score + 1;\n            this.changeRule(score)\n\n        } else {\n            const gradedCards = this.state.activeCards.slice().map((card) => {\n                card.isCorrect = this.state.currentRule.rule(\n                    card,\n                    this.state.activeCard\n                );\n                console.log(card.isCorrect);\n                if (this.state.isNot){\n                    card.isCorrect = !card.isCorrect\n                }\n                console.log(card.isCorrect);\n                return card\n            });\n            this.setState({activeCards: gradedCards});\n            this.newGame();\n\n        }\n\n\n    };\n\n    changeRule = (score) =>{\n\n        const numRules = Math.min(Rules.length, Math.floor(1 + (score / 5)));\n        console.log(numRules);\n        let currentRule = Rules[Math.floor(Math.random() * numRules)];\n        //let currentRule = Rules[4];\n        let possibleCards = this.state.cards;\n        shuffle(possibleCards);\n        let activeCard = possibleCards[0];\n        let activeCards = possibleCards.slice(0, Math.floor(score / 4) + 4);\n        shuffle(activeCards);\n        activeCards.forEach(card =>{ card.isCorrect = false});\n        let isNot = (Math.floor(Math.random() * 10) % 2 === 0);\n\n        this.setState({ score, currentRule, possibleCards, activeCard, activeCards, isNot})\n    };\n\n\n\n    newGame = () =>{\n        const prevScore = this.state.score;\n        updateHighScore(prevScore);\n        updateNumGames();\n        this.setState({prevScore, endGame:true});\n    };\n\n    render() {\n\n        return (\n            this.state.cards ?\n                <React.Fragment>\n                    <div className={'header'}>Not Football League</div>\n                    {this.state.endGame &&\n\n                        <div >\n                            <div>Great Job.  You scored: {this.state.prevScore}</div>\n                            <button onClick={()=>{this.startNewGame()}}>New Game?</button>\n                        </div>\n                    }\n                    <div className={'gameArea'}>\n                        <div className={`rule ${this.state.isNot && 'not'}`}>\n                            {this.state.currentRule.text(this.state.activeCard, this.state.isNot)}\n                        </div>\n                        <GameArea cards={this.state.activeCards} clickHandler={this.clickHandler} rule={this.state.currentRule}/>\n                    </div>\n                    <Footer\n                        score={this.state.score}\n                        prevScore={this.state.prevScore}\n                    />\n\n                </React.Fragment>\n                :\n                <div>Loading</div>\n\n        )\n    }\n}\n\nfunction shuffle(array) {\n    let m = array.length,\n        t,\n        i;\n    while (m) {\n        i = Math.floor(Math.random() * m--);\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n    }\n}\n\nexport default GameContainer\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GameContainer from \"./components/GameContainer\";\n\nfunction App() {\n  return (\n    <GameContainer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}